// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perceptron.proto

#include "perceptron.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_perceptron_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perceptron_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point3;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_perceptron_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Perceptron;
}  // namespace protobuf_perceptron_2eproto
namespace robosense {
class Point3DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point3>
      _instance;
} _Point3_default_instance_;
class PerceptronDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Perceptron>
      _instance;
} _Perceptron_default_instance_;
class PerceptronSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PerceptronSet>
      _instance;
} _PerceptronSet_default_instance_;
}  // namespace robosense
namespace protobuf_perceptron_2eproto {
static void InitDefaultsPoint3() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robosense::_Point3_default_instance_;
    new (ptr) ::robosense::Point3();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robosense::Point3::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point3 =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint3}, {}};

static void InitDefaultsPerceptron() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robosense::_Perceptron_default_instance_;
    new (ptr) ::robosense::Perceptron();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robosense::Perceptron::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Perceptron =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPerceptron}, {
      &protobuf_perceptron_2eproto::scc_info_Point3.base,}};

static void InitDefaultsPerceptronSet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robosense::_PerceptronSet_default_instance_;
    new (ptr) ::robosense::PerceptronSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robosense::PerceptronSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PerceptronSet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPerceptronSet}, {
      &protobuf_perceptron_2eproto::scc_info_Perceptron.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Point3.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Perceptron.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PerceptronSet.base);
}

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Point3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Point3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Point3, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Point3, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Point3, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, yaw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, nearest_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, box_corners_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, is_tracking_success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, angular_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, association_score_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, tracker_robustness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, tracking_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, visible_tracking_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, history_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, track_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, type_confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, is_background_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, polygon_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::Perceptron, trajectory_),
  5,
  6,
  0,
  7,
  8,
  9,
  1,
  10,
  2,
  ~0u,
  16,
  3,
  4,
  11,
  12,
  13,
  14,
  15,
  ~0u,
  18,
  19,
  20,
  17,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::PerceptronSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::PerceptronSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::robosense::PerceptronSet, perceptron_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::robosense::Point3)},
  { 11, 41, sizeof(::robosense::Perceptron)},
  { 66, 72, sizeof(::robosense::PerceptronSet)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::robosense::_Point3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robosense::_Perceptron_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::robosense::_PerceptronSet_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "perceptron.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020perceptron.proto\022\trobosense\")\n\006Point3\022"
      "\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\310\006\n\nPer"
      "ceptron\022\021\n\ttimestamp\030\001 \001(\001\022\n\n\002id\030\002 \001(\005\022#"
      "\n\010location\030\003 \001(\0132\021.robosense.Point3\022\016\n\006l"
      "ength\030\004 \001(\002\022\r\n\005width\030\005 \001(\002\022\016\n\006height\030\006 \001"
      "(\002\022$\n\tdirection\030\007 \001(\0132\021.robosense.Point3"
      "\022\013\n\003yaw\030\010 \001(\002\022(\n\rnearest_point\030\t \001(\0132\021.r"
      "obosense.Point3\022&\n\013box_corners\030\n \003(\0132\021.r"
      "obosense.Point3\022\033\n\023is_tracking_success\030\013"
      " \001(\010\022#\n\010velocity\030\014 \001(\0132\021.robosense.Point"
      "3\022\'\n\014acceleration\030\r \001(\0132\021.robosense.Poin"
      "t3\022\030\n\020angular_velocity\030\016 \001(\002\022\031\n\021associat"
      "ion_score\030\017 \001(\002\022\032\n\022tracker_robustness\030\020 "
      "\001(\002\022\025\n\rtracking_time\030\021 \001(\001\022\035\n\025visible_tr"
      "acking_time\030\022 \001(\001\022+\n\020history_velocity\030\023 "
      "\003(\0132\021.robosense.Point3\022.\n\ntrack_type\030\024 \001"
      "(\0162\032.robosense.Perceptron.Type\022(\n\004type\030\025"
      " \001(\0162\032.robosense.Perceptron.Type\022\027\n\017type"
      "_confidence\030\026 \001(\002\022\025\n\ris_background\030\027 \001(\010"
      "\022(\n\rpolygon_point\030\030 \003(\0132\021.robosense.Poin"
      "t3\022%\n\ntrajectory\030\031 \003(\0132\021.robosense.Point"
      "3\"H\n\004Type\022\013\n\007UNKNOWN\020\000\022\016\n\nPEDESTRIAN\020\001\022\013"
      "\n\007BICYCLE\020\002\022\007\n\003CAR\020\003\022\r\n\tTRUCK_BUS\020\004\":\n\rP"
      "erceptronSet\022)\n\nperceptron\030\001 \003(\0132\025.robos"
      "ense.Perceptron"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 975);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perceptron.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_perceptron_2eproto
namespace robosense {
const ::google::protobuf::EnumDescriptor* Perceptron_Type_descriptor() {
  protobuf_perceptron_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_perceptron_2eproto::file_level_enum_descriptors[0];
}
bool Perceptron_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Perceptron_Type Perceptron::UNKNOWN;
const Perceptron_Type Perceptron::PEDESTRIAN;
const Perceptron_Type Perceptron::BICYCLE;
const Perceptron_Type Perceptron::CAR;
const Perceptron_Type Perceptron::TRUCK_BUS;
const Perceptron_Type Perceptron::Type_MIN;
const Perceptron_Type Perceptron::Type_MAX;
const int Perceptron::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Point3::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point3::kXFieldNumber;
const int Point3::kYFieldNumber;
const int Point3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point3::Point3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perceptron_2eproto::scc_info_Point3.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robosense.Point3)
}
Point3::Point3(const Point3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:robosense.Point3)
}

void Point3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point3::~Point3() {
  // @@protoc_insertion_point(destructor:robosense.Point3)
  SharedDtor();
}

void Point3::SharedDtor() {
}

void Point3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point3::descriptor() {
  ::protobuf_perceptron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perceptron_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point3& Point3::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perceptron_2eproto::scc_info_Point3.base);
  return *internal_default_instance();
}


void Point3::Clear() {
// @@protoc_insertion_point(message_clear_start:robosense.Point3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robosense.Point3)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robosense.Point3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robosense.Point3)
  return false;
#undef DO_
}

void Point3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robosense.Point3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robosense.Point3)
}

::google::protobuf::uint8* Point3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robosense.Point3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robosense.Point3)
  return target;
}

size_t Point3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robosense.Point3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robosense.Point3)
  GOOGLE_DCHECK_NE(&from, this);
  const Point3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robosense.Point3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robosense.Point3)
    MergeFrom(*source);
  }
}

void Point3::MergeFrom(const Point3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robosense.Point3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robosense.Point3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3::CopyFrom(const Point3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robosense.Point3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3::IsInitialized() const {
  return true;
}

void Point3::Swap(Point3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point3::InternalSwap(Point3* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point3::GetMetadata() const {
  protobuf_perceptron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perceptron_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Perceptron::InitAsDefaultInstance() {
  ::robosense::_Perceptron_default_instance_._instance.get_mutable()->location_ = const_cast< ::robosense::Point3*>(
      ::robosense::Point3::internal_default_instance());
  ::robosense::_Perceptron_default_instance_._instance.get_mutable()->direction_ = const_cast< ::robosense::Point3*>(
      ::robosense::Point3::internal_default_instance());
  ::robosense::_Perceptron_default_instance_._instance.get_mutable()->nearest_point_ = const_cast< ::robosense::Point3*>(
      ::robosense::Point3::internal_default_instance());
  ::robosense::_Perceptron_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::robosense::Point3*>(
      ::robosense::Point3::internal_default_instance());
  ::robosense::_Perceptron_default_instance_._instance.get_mutable()->acceleration_ = const_cast< ::robosense::Point3*>(
      ::robosense::Point3::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Perceptron::kTimestampFieldNumber;
const int Perceptron::kIdFieldNumber;
const int Perceptron::kLocationFieldNumber;
const int Perceptron::kLengthFieldNumber;
const int Perceptron::kWidthFieldNumber;
const int Perceptron::kHeightFieldNumber;
const int Perceptron::kDirectionFieldNumber;
const int Perceptron::kYawFieldNumber;
const int Perceptron::kNearestPointFieldNumber;
const int Perceptron::kBoxCornersFieldNumber;
const int Perceptron::kIsTrackingSuccessFieldNumber;
const int Perceptron::kVelocityFieldNumber;
const int Perceptron::kAccelerationFieldNumber;
const int Perceptron::kAngularVelocityFieldNumber;
const int Perceptron::kAssociationScoreFieldNumber;
const int Perceptron::kTrackerRobustnessFieldNumber;
const int Perceptron::kTrackingTimeFieldNumber;
const int Perceptron::kVisibleTrackingTimeFieldNumber;
const int Perceptron::kHistoryVelocityFieldNumber;
const int Perceptron::kTrackTypeFieldNumber;
const int Perceptron::kTypeFieldNumber;
const int Perceptron::kTypeConfidenceFieldNumber;
const int Perceptron::kIsBackgroundFieldNumber;
const int Perceptron::kPolygonPointFieldNumber;
const int Perceptron::kTrajectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Perceptron::Perceptron()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perceptron_2eproto::scc_info_Perceptron.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robosense.Perceptron)
}
Perceptron::Perceptron(const Perceptron& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      box_corners_(from.box_corners_),
      history_velocity_(from.history_velocity_),
      polygon_point_(from.polygon_point_),
      trajectory_(from.trajectory_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::robosense::Point3(*from.location_);
  } else {
    location_ = NULL;
  }
  if (from.has_direction()) {
    direction_ = new ::robosense::Point3(*from.direction_);
  } else {
    direction_ = NULL;
  }
  if (from.has_nearest_point()) {
    nearest_point_ = new ::robosense::Point3(*from.nearest_point_);
  } else {
    nearest_point_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::robosense::Point3(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::robosense::Point3(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_confidence_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(type_confidence_));
  // @@protoc_insertion_point(copy_constructor:robosense.Perceptron)
}

void Perceptron::SharedCtor() {
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_confidence_) -
      reinterpret_cast<char*>(&location_)) + sizeof(type_confidence_));
}

Perceptron::~Perceptron() {
  // @@protoc_insertion_point(destructor:robosense.Perceptron)
  SharedDtor();
}

void Perceptron::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete direction_;
  if (this != internal_default_instance()) delete nearest_point_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete acceleration_;
}

void Perceptron::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Perceptron::descriptor() {
  ::protobuf_perceptron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perceptron_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Perceptron& Perceptron::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perceptron_2eproto::scc_info_Perceptron.base);
  return *internal_default_instance();
}


void Perceptron::Clear() {
// @@protoc_insertion_point(message_clear_start:robosense.Perceptron)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  box_corners_.Clear();
  history_velocity_.Clear();
  polygon_point_.Clear();
  trajectory_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(location_ != NULL);
      location_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(direction_ != NULL);
      direction_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(nearest_point_ != NULL);
      nearest_point_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(acceleration_ != NULL);
      acceleration_->Clear();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(length_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&visible_tracking_time_) -
        reinterpret_cast<char*>(&width_)) + sizeof(visible_tracking_time_));
  }
  if (cached_has_bits & 2031616u) {
    ::memset(&is_tracking_success_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_confidence_) -
        reinterpret_cast<char*>(&is_tracking_success_)) + sizeof(type_confidence_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Perceptron::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robosense.Perceptron)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .robosense.Point3 location = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float length = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float width = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .robosense.Point3 direction = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float yaw = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_yaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .robosense.Point3 nearest_point = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nearest_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .robosense.Point3 box_corners = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_box_corners()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_tracking_success = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_is_tracking_success();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tracking_success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .robosense.Point3 velocity = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .robosense.Point3 acceleration = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float angular_velocity = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_angular_velocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float association_score = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_association_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &association_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tracker_robustness = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_tracker_robustness();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tracker_robustness_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tracking_time = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u /* 137 & 0xFF */)) {
          set_has_tracking_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double visible_tracking_time = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u /* 145 & 0xFF */)) {
          set_has_visible_tracking_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &visible_tracking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .robosense.Point3 history_velocity = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_history_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .robosense.Perceptron.Type track_type = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u /* 160 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::robosense::Perceptron_Type_IsValid(value)) {
            set_track_type(static_cast< ::robosense::Perceptron_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                20, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .robosense.Perceptron.Type type = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u /* 168 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::robosense::Perceptron_Type_IsValid(value)) {
            set_type(static_cast< ::robosense::Perceptron_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                21, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float type_confidence = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {
          set_has_type_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &type_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_background = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u /* 184 & 0xFF */)) {
          set_has_is_background();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_background_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .robosense.Point3 polygon_point = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(194u /* 194 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .robosense.Point3 trajectory = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u /* 202 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_trajectory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robosense.Perceptron)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robosense.Perceptron)
  return false;
#undef DO_
}

void Perceptron::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robosense.Perceptron)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->timestamp(), output);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional .robosense.Point3 location = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_location(), output);
  }

  // optional float length = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->length(), output);
  }

  // optional float width = 5;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->width(), output);
  }

  // optional float height = 6;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->height(), output);
  }

  // optional .robosense.Point3 direction = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_direction(), output);
  }

  // optional float yaw = 8;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->yaw(), output);
  }

  // optional .robosense.Point3 nearest_point = 9;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_nearest_point(), output);
  }

  // repeated .robosense.Point3 box_corners = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->box_corners_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->box_corners(static_cast<int>(i)),
      output);
  }

  // optional bool is_tracking_success = 11;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_tracking_success(), output);
  }

  // optional .robosense.Point3 velocity = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_velocity(), output);
  }

  // optional .robosense.Point3 acceleration = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_acceleration(), output);
  }

  // optional float angular_velocity = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->angular_velocity(), output);
  }

  // optional float association_score = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->association_score(), output);
  }

  // optional float tracker_robustness = 16;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->tracker_robustness(), output);
  }

  // optional double tracking_time = 17;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->tracking_time(), output);
  }

  // optional double visible_tracking_time = 18;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->visible_tracking_time(), output);
  }

  // repeated .robosense.Point3 history_velocity = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_velocity_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19,
      this->history_velocity(static_cast<int>(i)),
      output);
  }

  // optional .robosense.Perceptron.Type track_type = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->track_type(), output);
  }

  // optional .robosense.Perceptron.Type type = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->type(), output);
  }

  // optional float type_confidence = 22;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->type_confidence(), output);
  }

  // optional bool is_background = 23;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->is_background(), output);
  }

  // repeated .robosense.Point3 polygon_point = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24,
      this->polygon_point(static_cast<int>(i)),
      output);
  }

  // repeated .robosense.Point3 trajectory = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25,
      this->trajectory(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robosense.Perceptron)
}

::google::protobuf::uint8* Perceptron::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robosense.Perceptron)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->timestamp(), target);
  }

  // optional int32 id = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional .robosense.Point3 location = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_location(), deterministic, target);
  }

  // optional float length = 4;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->length(), target);
  }

  // optional float width = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->width(), target);
  }

  // optional float height = 6;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->height(), target);
  }

  // optional .robosense.Point3 direction = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_direction(), deterministic, target);
  }

  // optional float yaw = 8;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->yaw(), target);
  }

  // optional .robosense.Point3 nearest_point = 9;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_nearest_point(), deterministic, target);
  }

  // repeated .robosense.Point3 box_corners = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->box_corners_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->box_corners(static_cast<int>(i)), deterministic, target);
  }

  // optional bool is_tracking_success = 11;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_tracking_success(), target);
  }

  // optional .robosense.Point3 velocity = 12;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_velocity(), deterministic, target);
  }

  // optional .robosense.Point3 acceleration = 13;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_acceleration(), deterministic, target);
  }

  // optional float angular_velocity = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->angular_velocity(), target);
  }

  // optional float association_score = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->association_score(), target);
  }

  // optional float tracker_robustness = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->tracker_robustness(), target);
  }

  // optional double tracking_time = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->tracking_time(), target);
  }

  // optional double visible_tracking_time = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->visible_tracking_time(), target);
  }

  // repeated .robosense.Point3 history_velocity = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->history_velocity_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->history_velocity(static_cast<int>(i)), deterministic, target);
  }

  // optional .robosense.Perceptron.Type track_type = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->track_type(), target);
  }

  // optional .robosense.Perceptron.Type type = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      21, this->type(), target);
  }

  // optional float type_confidence = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->type_confidence(), target);
  }

  // optional bool is_background = 23;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->is_background(), target);
  }

  // repeated .robosense.Point3 polygon_point = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->polygon_point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, this->polygon_point(static_cast<int>(i)), deterministic, target);
  }

  // repeated .robosense.Point3 trajectory = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trajectory_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, this->trajectory(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robosense.Perceptron)
  return target;
}

size_t Perceptron::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robosense.Perceptron)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .robosense.Point3 box_corners = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->box_corners_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->box_corners(static_cast<int>(i)));
    }
  }

  // repeated .robosense.Point3 history_velocity = 19;
  {
    unsigned int count = static_cast<unsigned int>(this->history_velocity_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->history_velocity(static_cast<int>(i)));
    }
  }

  // repeated .robosense.Point3 polygon_point = 24;
  {
    unsigned int count = static_cast<unsigned int>(this->polygon_point_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->polygon_point(static_cast<int>(i)));
    }
  }

  // repeated .robosense.Point3 trajectory = 25;
  {
    unsigned int count = static_cast<unsigned int>(this->trajectory_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trajectory(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .robosense.Point3 location = 3;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *location_);
    }

    // optional .robosense.Point3 direction = 7;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *direction_);
    }

    // optional .robosense.Point3 nearest_point = 9;
    if (has_nearest_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *nearest_point_);
    }

    // optional .robosense.Point3 velocity = 12;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional .robosense.Point3 acceleration = 13;
    if (has_acceleration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *acceleration_);
    }

    // optional double timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional float length = 4;
    if (has_length()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float width = 5;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional float height = 6;
    if (has_height()) {
      total_size += 1 + 4;
    }

    // optional float yaw = 8;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

    // optional float angular_velocity = 14;
    if (has_angular_velocity()) {
      total_size += 1 + 4;
    }

    // optional float association_score = 15;
    if (has_association_score()) {
      total_size += 1 + 4;
    }

    // optional float tracker_robustness = 16;
    if (has_tracker_robustness()) {
      total_size += 2 + 4;
    }

    // optional double tracking_time = 17;
    if (has_tracking_time()) {
      total_size += 2 + 8;
    }

    // optional double visible_tracking_time = 18;
    if (has_visible_tracking_time()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional bool is_tracking_success = 11;
    if (has_is_tracking_success()) {
      total_size += 1 + 1;
    }

    // optional bool is_background = 23;
    if (has_is_background()) {
      total_size += 2 + 1;
    }

    // optional .robosense.Perceptron.Type track_type = 20;
    if (has_track_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->track_type());
    }

    // optional .robosense.Perceptron.Type type = 21;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float type_confidence = 22;
    if (has_type_confidence()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Perceptron::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robosense.Perceptron)
  GOOGLE_DCHECK_NE(&from, this);
  const Perceptron* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Perceptron>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robosense.Perceptron)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robosense.Perceptron)
    MergeFrom(*source);
  }
}

void Perceptron::MergeFrom(const Perceptron& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robosense.Perceptron)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  box_corners_.MergeFrom(from.box_corners_);
  history_velocity_.MergeFrom(from.history_velocity_);
  polygon_point_.MergeFrom(from.polygon_point_);
  trajectory_.MergeFrom(from.trajectory_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_location()->::robosense::Point3::MergeFrom(from.location());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_direction()->::robosense::Point3::MergeFrom(from.direction());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_nearest_point()->::robosense::Point3::MergeFrom(from.nearest_point());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_velocity()->::robosense::Point3::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_acceleration()->::robosense::Point3::MergeFrom(from.acceleration());
    }
    if (cached_has_bits & 0x00000020u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000040u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000080u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000200u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000400u) {
      yaw_ = from.yaw_;
    }
    if (cached_has_bits & 0x00000800u) {
      angular_velocity_ = from.angular_velocity_;
    }
    if (cached_has_bits & 0x00001000u) {
      association_score_ = from.association_score_;
    }
    if (cached_has_bits & 0x00002000u) {
      tracker_robustness_ = from.tracker_robustness_;
    }
    if (cached_has_bits & 0x00004000u) {
      tracking_time_ = from.tracking_time_;
    }
    if (cached_has_bits & 0x00008000u) {
      visible_tracking_time_ = from.visible_tracking_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2031616u) {
    if (cached_has_bits & 0x00010000u) {
      is_tracking_success_ = from.is_tracking_success_;
    }
    if (cached_has_bits & 0x00020000u) {
      is_background_ = from.is_background_;
    }
    if (cached_has_bits & 0x00040000u) {
      track_type_ = from.track_type_;
    }
    if (cached_has_bits & 0x00080000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00100000u) {
      type_confidence_ = from.type_confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Perceptron::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robosense.Perceptron)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Perceptron::CopyFrom(const Perceptron& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robosense.Perceptron)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Perceptron::IsInitialized() const {
  return true;
}

void Perceptron::Swap(Perceptron* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Perceptron::InternalSwap(Perceptron* other) {
  using std::swap;
  CastToBase(&box_corners_)->InternalSwap(CastToBase(&other->box_corners_));
  CastToBase(&history_velocity_)->InternalSwap(CastToBase(&other->history_velocity_));
  CastToBase(&polygon_point_)->InternalSwap(CastToBase(&other->polygon_point_));
  CastToBase(&trajectory_)->InternalSwap(CastToBase(&other->trajectory_));
  swap(location_, other->location_);
  swap(direction_, other->direction_);
  swap(nearest_point_, other->nearest_point_);
  swap(velocity_, other->velocity_);
  swap(acceleration_, other->acceleration_);
  swap(timestamp_, other->timestamp_);
  swap(id_, other->id_);
  swap(length_, other->length_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(yaw_, other->yaw_);
  swap(angular_velocity_, other->angular_velocity_);
  swap(association_score_, other->association_score_);
  swap(tracker_robustness_, other->tracker_robustness_);
  swap(tracking_time_, other->tracking_time_);
  swap(visible_tracking_time_, other->visible_tracking_time_);
  swap(is_tracking_success_, other->is_tracking_success_);
  swap(is_background_, other->is_background_);
  swap(track_type_, other->track_type_);
  swap(type_, other->type_);
  swap(type_confidence_, other->type_confidence_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Perceptron::GetMetadata() const {
  protobuf_perceptron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perceptron_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PerceptronSet::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptronSet::kPerceptronFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptronSet::PerceptronSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_perceptron_2eproto::scc_info_PerceptronSet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:robosense.PerceptronSet)
}
PerceptronSet::PerceptronSet(const PerceptronSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      perceptron_(from.perceptron_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:robosense.PerceptronSet)
}

void PerceptronSet::SharedCtor() {
}

PerceptronSet::~PerceptronSet() {
  // @@protoc_insertion_point(destructor:robosense.PerceptronSet)
  SharedDtor();
}

void PerceptronSet::SharedDtor() {
}

void PerceptronSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PerceptronSet::descriptor() {
  ::protobuf_perceptron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perceptron_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PerceptronSet& PerceptronSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_perceptron_2eproto::scc_info_PerceptronSet.base);
  return *internal_default_instance();
}


void PerceptronSet::Clear() {
// @@protoc_insertion_point(message_clear_start:robosense.PerceptronSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  perceptron_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerceptronSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:robosense.PerceptronSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .robosense.Perceptron perceptron = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_perceptron()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:robosense.PerceptronSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:robosense.PerceptronSet)
  return false;
#undef DO_
}

void PerceptronSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:robosense.PerceptronSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .robosense.Perceptron perceptron = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perceptron_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->perceptron(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:robosense.PerceptronSet)
}

::google::protobuf::uint8* PerceptronSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:robosense.PerceptronSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .robosense.Perceptron perceptron = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->perceptron_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->perceptron(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robosense.PerceptronSet)
  return target;
}

size_t PerceptronSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robosense.PerceptronSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .robosense.Perceptron perceptron = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->perceptron_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->perceptron(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerceptronSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robosense.PerceptronSet)
  GOOGLE_DCHECK_NE(&from, this);
  const PerceptronSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PerceptronSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robosense.PerceptronSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robosense.PerceptronSet)
    MergeFrom(*source);
  }
}

void PerceptronSet::MergeFrom(const PerceptronSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robosense.PerceptronSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perceptron_.MergeFrom(from.perceptron_);
}

void PerceptronSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robosense.PerceptronSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PerceptronSet::CopyFrom(const PerceptronSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robosense.PerceptronSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptronSet::IsInitialized() const {
  return true;
}

void PerceptronSet::Swap(PerceptronSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptronSet::InternalSwap(PerceptronSet* other) {
  using std::swap;
  CastToBase(&perceptron_)->InternalSwap(CastToBase(&other->perceptron_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PerceptronSet::GetMetadata() const {
  protobuf_perceptron_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_perceptron_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace robosense
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robosense::Point3* Arena::CreateMaybeMessage< ::robosense::Point3 >(Arena* arena) {
  return Arena::CreateInternal< ::robosense::Point3 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robosense::Perceptron* Arena::CreateMaybeMessage< ::robosense::Perceptron >(Arena* arena) {
  return Arena::CreateInternal< ::robosense::Perceptron >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::robosense::PerceptronSet* Arena::CreateMaybeMessage< ::robosense::PerceptronSet >(Arena* arena) {
  return Arena::CreateInternal< ::robosense::PerceptronSet >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
