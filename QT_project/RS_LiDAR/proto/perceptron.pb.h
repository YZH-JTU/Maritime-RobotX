// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perceptron.proto

#ifndef PROTOBUF_INCLUDED_perceptron_2eproto
#define PROTOBUF_INCLUDED_perceptron_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_perceptron_2eproto 

namespace protobuf_perceptron_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_perceptron_2eproto
namespace robosense {
class Perceptron;
class PerceptronDefaultTypeInternal;
extern PerceptronDefaultTypeInternal _Perceptron_default_instance_;
class PerceptronSet;
class PerceptronSetDefaultTypeInternal;
extern PerceptronSetDefaultTypeInternal _PerceptronSet_default_instance_;
class Point3;
class Point3DefaultTypeInternal;
extern Point3DefaultTypeInternal _Point3_default_instance_;
}  // namespace robosense
namespace google {
namespace protobuf {
template<> ::robosense::Perceptron* Arena::CreateMaybeMessage<::robosense::Perceptron>(Arena*);
template<> ::robosense::PerceptronSet* Arena::CreateMaybeMessage<::robosense::PerceptronSet>(Arena*);
template<> ::robosense::Point3* Arena::CreateMaybeMessage<::robosense::Point3>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace robosense {

enum Perceptron_Type {
  Perceptron_Type_UNKNOWN = 0,
  Perceptron_Type_PEDESTRIAN = 1,
  Perceptron_Type_BICYCLE = 2,
  Perceptron_Type_CAR = 3,
  Perceptron_Type_TRUCK_BUS = 4
};
bool Perceptron_Type_IsValid(int value);
const Perceptron_Type Perceptron_Type_Type_MIN = Perceptron_Type_UNKNOWN;
const Perceptron_Type Perceptron_Type_Type_MAX = Perceptron_Type_TRUCK_BUS;
const int Perceptron_Type_Type_ARRAYSIZE = Perceptron_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Perceptron_Type_descriptor();
inline const ::std::string& Perceptron_Type_Name(Perceptron_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Perceptron_Type_descriptor(), value);
}
inline bool Perceptron_Type_Parse(
    const ::std::string& name, Perceptron_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Perceptron_Type>(
    Perceptron_Type_descriptor(), name, value);
}
// ===================================================================

class Point3 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robosense.Point3) */ {
 public:
  Point3();
  virtual ~Point3();

  Point3(const Point3& from);

  inline Point3& operator=(const Point3& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point3(Point3&& from) noexcept
    : Point3() {
    *this = ::std::move(from);
  }

  inline Point3& operator=(Point3&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3* internal_default_instance() {
    return reinterpret_cast<const Point3*>(
               &_Point3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Point3* other);
  friend void swap(Point3& a, Point3& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point3* New() const final {
    return CreateMaybeMessage<Point3>(NULL);
  }

  Point3* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point3>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point3& from);
  void MergeFrom(const Point3& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:robosense.Point3)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  friend struct ::protobuf_perceptron_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Perceptron : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robosense.Perceptron) */ {
 public:
  Perceptron();
  virtual ~Perceptron();

  Perceptron(const Perceptron& from);

  inline Perceptron& operator=(const Perceptron& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Perceptron(Perceptron&& from) noexcept
    : Perceptron() {
    *this = ::std::move(from);
  }

  inline Perceptron& operator=(Perceptron&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Perceptron& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Perceptron* internal_default_instance() {
    return reinterpret_cast<const Perceptron*>(
               &_Perceptron_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Perceptron* other);
  friend void swap(Perceptron& a, Perceptron& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Perceptron* New() const final {
    return CreateMaybeMessage<Perceptron>(NULL);
  }

  Perceptron* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Perceptron>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Perceptron& from);
  void MergeFrom(const Perceptron& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Perceptron* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Perceptron_Type Type;
  static const Type UNKNOWN =
    Perceptron_Type_UNKNOWN;
  static const Type PEDESTRIAN =
    Perceptron_Type_PEDESTRIAN;
  static const Type BICYCLE =
    Perceptron_Type_BICYCLE;
  static const Type CAR =
    Perceptron_Type_CAR;
  static const Type TRUCK_BUS =
    Perceptron_Type_TRUCK_BUS;
  static inline bool Type_IsValid(int value) {
    return Perceptron_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Perceptron_Type_Type_MIN;
  static const Type Type_MAX =
    Perceptron_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Perceptron_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Perceptron_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Perceptron_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Perceptron_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .robosense.Point3 box_corners = 10;
  int box_corners_size() const;
  void clear_box_corners();
  static const int kBoxCornersFieldNumber = 10;
  ::robosense::Point3* mutable_box_corners(int index);
  ::google::protobuf::RepeatedPtrField< ::robosense::Point3 >*
      mutable_box_corners();
  const ::robosense::Point3& box_corners(int index) const;
  ::robosense::Point3* add_box_corners();
  const ::google::protobuf::RepeatedPtrField< ::robosense::Point3 >&
      box_corners() const;

  // repeated .robosense.Point3 history_velocity = 19;
  int history_velocity_size() const;
  void clear_history_velocity();
  static const int kHistoryVelocityFieldNumber = 19;
  ::robosense::Point3* mutable_history_velocity(int index);
  ::google::protobuf::RepeatedPtrField< ::robosense::Point3 >*
      mutable_history_velocity();
  const ::robosense::Point3& history_velocity(int index) const;
  ::robosense::Point3* add_history_velocity();
  const ::google::protobuf::RepeatedPtrField< ::robosense::Point3 >&
      history_velocity() const;

  // repeated .robosense.Point3 polygon_point = 24;
  int polygon_point_size() const;
  void clear_polygon_point();
  static const int kPolygonPointFieldNumber = 24;
  ::robosense::Point3* mutable_polygon_point(int index);
  ::google::protobuf::RepeatedPtrField< ::robosense::Point3 >*
      mutable_polygon_point();
  const ::robosense::Point3& polygon_point(int index) const;
  ::robosense::Point3* add_polygon_point();
  const ::google::protobuf::RepeatedPtrField< ::robosense::Point3 >&
      polygon_point() const;

  // repeated .robosense.Point3 trajectory = 25;
  int trajectory_size() const;
  void clear_trajectory();
  static const int kTrajectoryFieldNumber = 25;
  ::robosense::Point3* mutable_trajectory(int index);
  ::google::protobuf::RepeatedPtrField< ::robosense::Point3 >*
      mutable_trajectory();
  const ::robosense::Point3& trajectory(int index) const;
  ::robosense::Point3* add_trajectory();
  const ::google::protobuf::RepeatedPtrField< ::robosense::Point3 >&
      trajectory() const;

  // optional .robosense.Point3 location = 3;
  bool has_location() const;
  void clear_location();
  static const int kLocationFieldNumber = 3;
  private:
  const ::robosense::Point3& _internal_location() const;
  public:
  const ::robosense::Point3& location() const;
  ::robosense::Point3* release_location();
  ::robosense::Point3* mutable_location();
  void set_allocated_location(::robosense::Point3* location);

  // optional .robosense.Point3 direction = 7;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 7;
  private:
  const ::robosense::Point3& _internal_direction() const;
  public:
  const ::robosense::Point3& direction() const;
  ::robosense::Point3* release_direction();
  ::robosense::Point3* mutable_direction();
  void set_allocated_direction(::robosense::Point3* direction);

  // optional .robosense.Point3 nearest_point = 9;
  bool has_nearest_point() const;
  void clear_nearest_point();
  static const int kNearestPointFieldNumber = 9;
  private:
  const ::robosense::Point3& _internal_nearest_point() const;
  public:
  const ::robosense::Point3& nearest_point() const;
  ::robosense::Point3* release_nearest_point();
  ::robosense::Point3* mutable_nearest_point();
  void set_allocated_nearest_point(::robosense::Point3* nearest_point);

  // optional .robosense.Point3 velocity = 12;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 12;
  private:
  const ::robosense::Point3& _internal_velocity() const;
  public:
  const ::robosense::Point3& velocity() const;
  ::robosense::Point3* release_velocity();
  ::robosense::Point3* mutable_velocity();
  void set_allocated_velocity(::robosense::Point3* velocity);

  // optional .robosense.Point3 acceleration = 13;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 13;
  private:
  const ::robosense::Point3& _internal_acceleration() const;
  public:
  const ::robosense::Point3& acceleration() const;
  ::robosense::Point3* release_acceleration();
  ::robosense::Point3* mutable_acceleration();
  void set_allocated_acceleration(::robosense::Point3* acceleration);

  // optional double timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  double timestamp() const;
  void set_timestamp(double value);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional float length = 4;
  bool has_length() const;
  void clear_length();
  static const int kLengthFieldNumber = 4;
  float length() const;
  void set_length(float value);

  // optional float width = 5;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 5;
  float width() const;
  void set_width(float value);

  // optional float height = 6;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 6;
  float height() const;
  void set_height(float value);

  // optional float yaw = 8;
  bool has_yaw() const;
  void clear_yaw();
  static const int kYawFieldNumber = 8;
  float yaw() const;
  void set_yaw(float value);

  // optional float angular_velocity = 14;
  bool has_angular_velocity() const;
  void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 14;
  float angular_velocity() const;
  void set_angular_velocity(float value);

  // optional float association_score = 15;
  bool has_association_score() const;
  void clear_association_score();
  static const int kAssociationScoreFieldNumber = 15;
  float association_score() const;
  void set_association_score(float value);

  // optional float tracker_robustness = 16;
  bool has_tracker_robustness() const;
  void clear_tracker_robustness();
  static const int kTrackerRobustnessFieldNumber = 16;
  float tracker_robustness() const;
  void set_tracker_robustness(float value);

  // optional double tracking_time = 17;
  bool has_tracking_time() const;
  void clear_tracking_time();
  static const int kTrackingTimeFieldNumber = 17;
  double tracking_time() const;
  void set_tracking_time(double value);

  // optional double visible_tracking_time = 18;
  bool has_visible_tracking_time() const;
  void clear_visible_tracking_time();
  static const int kVisibleTrackingTimeFieldNumber = 18;
  double visible_tracking_time() const;
  void set_visible_tracking_time(double value);

  // optional bool is_tracking_success = 11;
  bool has_is_tracking_success() const;
  void clear_is_tracking_success();
  static const int kIsTrackingSuccessFieldNumber = 11;
  bool is_tracking_success() const;
  void set_is_tracking_success(bool value);

  // optional bool is_background = 23;
  bool has_is_background() const;
  void clear_is_background();
  static const int kIsBackgroundFieldNumber = 23;
  bool is_background() const;
  void set_is_background(bool value);

  // optional .robosense.Perceptron.Type track_type = 20;
  bool has_track_type() const;
  void clear_track_type();
  static const int kTrackTypeFieldNumber = 20;
  ::robosense::Perceptron_Type track_type() const;
  void set_track_type(::robosense::Perceptron_Type value);

  // optional .robosense.Perceptron.Type type = 21;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 21;
  ::robosense::Perceptron_Type type() const;
  void set_type(::robosense::Perceptron_Type value);

  // optional float type_confidence = 22;
  bool has_type_confidence() const;
  void clear_type_confidence();
  static const int kTypeConfidenceFieldNumber = 22;
  float type_confidence() const;
  void set_type_confidence(float value);

  // @@protoc_insertion_point(class_scope:robosense.Perceptron)
 private:
  void set_has_timestamp();
  void clear_has_timestamp();
  void set_has_id();
  void clear_has_id();
  void set_has_location();
  void clear_has_location();
  void set_has_length();
  void clear_has_length();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();
  void set_has_direction();
  void clear_has_direction();
  void set_has_yaw();
  void clear_has_yaw();
  void set_has_nearest_point();
  void clear_has_nearest_point();
  void set_has_is_tracking_success();
  void clear_has_is_tracking_success();
  void set_has_velocity();
  void clear_has_velocity();
  void set_has_acceleration();
  void clear_has_acceleration();
  void set_has_angular_velocity();
  void clear_has_angular_velocity();
  void set_has_association_score();
  void clear_has_association_score();
  void set_has_tracker_robustness();
  void clear_has_tracker_robustness();
  void set_has_tracking_time();
  void clear_has_tracking_time();
  void set_has_visible_tracking_time();
  void clear_has_visible_tracking_time();
  void set_has_track_type();
  void clear_has_track_type();
  void set_has_type();
  void clear_has_type();
  void set_has_type_confidence();
  void clear_has_type_confidence();
  void set_has_is_background();
  void clear_has_is_background();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::robosense::Point3 > box_corners_;
  ::google::protobuf::RepeatedPtrField< ::robosense::Point3 > history_velocity_;
  ::google::protobuf::RepeatedPtrField< ::robosense::Point3 > polygon_point_;
  ::google::protobuf::RepeatedPtrField< ::robosense::Point3 > trajectory_;
  ::robosense::Point3* location_;
  ::robosense::Point3* direction_;
  ::robosense::Point3* nearest_point_;
  ::robosense::Point3* velocity_;
  ::robosense::Point3* acceleration_;
  double timestamp_;
  ::google::protobuf::int32 id_;
  float length_;
  float width_;
  float height_;
  float yaw_;
  float angular_velocity_;
  float association_score_;
  float tracker_robustness_;
  double tracking_time_;
  double visible_tracking_time_;
  bool is_tracking_success_;
  bool is_background_;
  int track_type_;
  int type_;
  float type_confidence_;
  friend struct ::protobuf_perceptron_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PerceptronSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robosense.PerceptronSet) */ {
 public:
  PerceptronSet();
  virtual ~PerceptronSet();

  PerceptronSet(const PerceptronSet& from);

  inline PerceptronSet& operator=(const PerceptronSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PerceptronSet(PerceptronSet&& from) noexcept
    : PerceptronSet() {
    *this = ::std::move(from);
  }

  inline PerceptronSet& operator=(PerceptronSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PerceptronSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PerceptronSet* internal_default_instance() {
    return reinterpret_cast<const PerceptronSet*>(
               &_PerceptronSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PerceptronSet* other);
  friend void swap(PerceptronSet& a, PerceptronSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PerceptronSet* New() const final {
    return CreateMaybeMessage<PerceptronSet>(NULL);
  }

  PerceptronSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PerceptronSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PerceptronSet& from);
  void MergeFrom(const PerceptronSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerceptronSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .robosense.Perceptron perceptron = 1;
  int perceptron_size() const;
  void clear_perceptron();
  static const int kPerceptronFieldNumber = 1;
  ::robosense::Perceptron* mutable_perceptron(int index);
  ::google::protobuf::RepeatedPtrField< ::robosense::Perceptron >*
      mutable_perceptron();
  const ::robosense::Perceptron& perceptron(int index) const;
  ::robosense::Perceptron* add_perceptron();
  const ::google::protobuf::RepeatedPtrField< ::robosense::Perceptron >&
      perceptron() const;

  // @@protoc_insertion_point(class_scope:robosense.PerceptronSet)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::robosense::Perceptron > perceptron_;
  friend struct ::protobuf_perceptron_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point3

// optional float x = 1;
inline bool Point3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point3::x() const {
  // @@protoc_insertion_point(field_get:robosense.Point3.x)
  return x_;
}
inline void Point3::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:robosense.Point3.x)
}

// optional float y = 2;
inline bool Point3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point3::y() const {
  // @@protoc_insertion_point(field_get:robosense.Point3.y)
  return y_;
}
inline void Point3::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:robosense.Point3.y)
}

// optional float z = 3;
inline bool Point3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Point3::z() const {
  // @@protoc_insertion_point(field_get:robosense.Point3.z)
  return z_;
}
inline void Point3::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:robosense.Point3.z)
}

// -------------------------------------------------------------------

// Perceptron

// optional double timestamp = 1;
inline bool Perceptron::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Perceptron::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Perceptron::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Perceptron::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
inline double Perceptron::timestamp() const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.timestamp)
  return timestamp_;
}
inline void Perceptron::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:robosense.Perceptron.timestamp)
}

// optional int32 id = 2;
inline bool Perceptron::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Perceptron::set_has_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Perceptron::clear_has_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Perceptron::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Perceptron::id() const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.id)
  return id_;
}
inline void Perceptron::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:robosense.Perceptron.id)
}

// optional .robosense.Point3 location = 3;
inline bool Perceptron::has_location() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Perceptron::set_has_location() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Perceptron::clear_has_location() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Perceptron::clear_location() {
  if (location_ != NULL) location_->Clear();
  clear_has_location();
}
inline const ::robosense::Point3& Perceptron::_internal_location() const {
  return *location_;
}
inline const ::robosense::Point3& Perceptron::location() const {
  const ::robosense::Point3* p = location_;
  // @@protoc_insertion_point(field_get:robosense.Perceptron.location)
  return p != NULL ? *p : *reinterpret_cast<const ::robosense::Point3*>(
      &::robosense::_Point3_default_instance_);
}
inline ::robosense::Point3* Perceptron::release_location() {
  // @@protoc_insertion_point(field_release:robosense.Perceptron.location)
  clear_has_location();
  ::robosense::Point3* temp = location_;
  location_ = NULL;
  return temp;
}
inline ::robosense::Point3* Perceptron::mutable_location() {
  set_has_location();
  if (location_ == NULL) {
    auto* p = CreateMaybeMessage<::robosense::Point3>(GetArenaNoVirtual());
    location_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robosense.Perceptron.location)
  return location_;
}
inline void Perceptron::set_allocated_location(::robosense::Point3* location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete location_;
  }
  if (location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
  } else {
    clear_has_location();
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:robosense.Perceptron.location)
}

// optional float length = 4;
inline bool Perceptron::has_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Perceptron::set_has_length() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Perceptron::clear_has_length() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Perceptron::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline float Perceptron::length() const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.length)
  return length_;
}
inline void Perceptron::set_length(float value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:robosense.Perceptron.length)
}

// optional float width = 5;
inline bool Perceptron::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Perceptron::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Perceptron::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Perceptron::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float Perceptron::width() const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.width)
  return width_;
}
inline void Perceptron::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:robosense.Perceptron.width)
}

// optional float height = 6;
inline bool Perceptron::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Perceptron::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Perceptron::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Perceptron::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float Perceptron::height() const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.height)
  return height_;
}
inline void Perceptron::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:robosense.Perceptron.height)
}

// optional .robosense.Point3 direction = 7;
inline bool Perceptron::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Perceptron::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Perceptron::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Perceptron::clear_direction() {
  if (direction_ != NULL) direction_->Clear();
  clear_has_direction();
}
inline const ::robosense::Point3& Perceptron::_internal_direction() const {
  return *direction_;
}
inline const ::robosense::Point3& Perceptron::direction() const {
  const ::robosense::Point3* p = direction_;
  // @@protoc_insertion_point(field_get:robosense.Perceptron.direction)
  return p != NULL ? *p : *reinterpret_cast<const ::robosense::Point3*>(
      &::robosense::_Point3_default_instance_);
}
inline ::robosense::Point3* Perceptron::release_direction() {
  // @@protoc_insertion_point(field_release:robosense.Perceptron.direction)
  clear_has_direction();
  ::robosense::Point3* temp = direction_;
  direction_ = NULL;
  return temp;
}
inline ::robosense::Point3* Perceptron::mutable_direction() {
  set_has_direction();
  if (direction_ == NULL) {
    auto* p = CreateMaybeMessage<::robosense::Point3>(GetArenaNoVirtual());
    direction_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robosense.Perceptron.direction)
  return direction_;
}
inline void Perceptron::set_allocated_direction(::robosense::Point3* direction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete direction_;
  }
  if (direction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      direction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    set_has_direction();
  } else {
    clear_has_direction();
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:robosense.Perceptron.direction)
}

// optional float yaw = 8;
inline bool Perceptron::has_yaw() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Perceptron::set_has_yaw() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Perceptron::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Perceptron::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline float Perceptron::yaw() const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.yaw)
  return yaw_;
}
inline void Perceptron::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:robosense.Perceptron.yaw)
}

// optional .robosense.Point3 nearest_point = 9;
inline bool Perceptron::has_nearest_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Perceptron::set_has_nearest_point() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Perceptron::clear_has_nearest_point() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Perceptron::clear_nearest_point() {
  if (nearest_point_ != NULL) nearest_point_->Clear();
  clear_has_nearest_point();
}
inline const ::robosense::Point3& Perceptron::_internal_nearest_point() const {
  return *nearest_point_;
}
inline const ::robosense::Point3& Perceptron::nearest_point() const {
  const ::robosense::Point3* p = nearest_point_;
  // @@protoc_insertion_point(field_get:robosense.Perceptron.nearest_point)
  return p != NULL ? *p : *reinterpret_cast<const ::robosense::Point3*>(
      &::robosense::_Point3_default_instance_);
}
inline ::robosense::Point3* Perceptron::release_nearest_point() {
  // @@protoc_insertion_point(field_release:robosense.Perceptron.nearest_point)
  clear_has_nearest_point();
  ::robosense::Point3* temp = nearest_point_;
  nearest_point_ = NULL;
  return temp;
}
inline ::robosense::Point3* Perceptron::mutable_nearest_point() {
  set_has_nearest_point();
  if (nearest_point_ == NULL) {
    auto* p = CreateMaybeMessage<::robosense::Point3>(GetArenaNoVirtual());
    nearest_point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robosense.Perceptron.nearest_point)
  return nearest_point_;
}
inline void Perceptron::set_allocated_nearest_point(::robosense::Point3* nearest_point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete nearest_point_;
  }
  if (nearest_point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nearest_point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nearest_point, submessage_arena);
    }
    set_has_nearest_point();
  } else {
    clear_has_nearest_point();
  }
  nearest_point_ = nearest_point;
  // @@protoc_insertion_point(field_set_allocated:robosense.Perceptron.nearest_point)
}

// repeated .robosense.Point3 box_corners = 10;
inline int Perceptron::box_corners_size() const {
  return box_corners_.size();
}
inline void Perceptron::clear_box_corners() {
  box_corners_.Clear();
}
inline ::robosense::Point3* Perceptron::mutable_box_corners(int index) {
  // @@protoc_insertion_point(field_mutable:robosense.Perceptron.box_corners)
  return box_corners_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::robosense::Point3 >*
Perceptron::mutable_box_corners() {
  // @@protoc_insertion_point(field_mutable_list:robosense.Perceptron.box_corners)
  return &box_corners_;
}
inline const ::robosense::Point3& Perceptron::box_corners(int index) const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.box_corners)
  return box_corners_.Get(index);
}
inline ::robosense::Point3* Perceptron::add_box_corners() {
  // @@protoc_insertion_point(field_add:robosense.Perceptron.box_corners)
  return box_corners_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robosense::Point3 >&
Perceptron::box_corners() const {
  // @@protoc_insertion_point(field_list:robosense.Perceptron.box_corners)
  return box_corners_;
}

// optional bool is_tracking_success = 11;
inline bool Perceptron::has_is_tracking_success() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Perceptron::set_has_is_tracking_success() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Perceptron::clear_has_is_tracking_success() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Perceptron::clear_is_tracking_success() {
  is_tracking_success_ = false;
  clear_has_is_tracking_success();
}
inline bool Perceptron::is_tracking_success() const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.is_tracking_success)
  return is_tracking_success_;
}
inline void Perceptron::set_is_tracking_success(bool value) {
  set_has_is_tracking_success();
  is_tracking_success_ = value;
  // @@protoc_insertion_point(field_set:robosense.Perceptron.is_tracking_success)
}

// optional .robosense.Point3 velocity = 12;
inline bool Perceptron::has_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Perceptron::set_has_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Perceptron::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Perceptron::clear_velocity() {
  if (velocity_ != NULL) velocity_->Clear();
  clear_has_velocity();
}
inline const ::robosense::Point3& Perceptron::_internal_velocity() const {
  return *velocity_;
}
inline const ::robosense::Point3& Perceptron::velocity() const {
  const ::robosense::Point3* p = velocity_;
  // @@protoc_insertion_point(field_get:robosense.Perceptron.velocity)
  return p != NULL ? *p : *reinterpret_cast<const ::robosense::Point3*>(
      &::robosense::_Point3_default_instance_);
}
inline ::robosense::Point3* Perceptron::release_velocity() {
  // @@protoc_insertion_point(field_release:robosense.Perceptron.velocity)
  clear_has_velocity();
  ::robosense::Point3* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline ::robosense::Point3* Perceptron::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    auto* p = CreateMaybeMessage<::robosense::Point3>(GetArenaNoVirtual());
    velocity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robosense.Perceptron.velocity)
  return velocity_;
}
inline void Perceptron::set_allocated_velocity(::robosense::Point3* velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete velocity_;
  }
  if (velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:robosense.Perceptron.velocity)
}

// optional .robosense.Point3 acceleration = 13;
inline bool Perceptron::has_acceleration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Perceptron::set_has_acceleration() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Perceptron::clear_has_acceleration() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Perceptron::clear_acceleration() {
  if (acceleration_ != NULL) acceleration_->Clear();
  clear_has_acceleration();
}
inline const ::robosense::Point3& Perceptron::_internal_acceleration() const {
  return *acceleration_;
}
inline const ::robosense::Point3& Perceptron::acceleration() const {
  const ::robosense::Point3* p = acceleration_;
  // @@protoc_insertion_point(field_get:robosense.Perceptron.acceleration)
  return p != NULL ? *p : *reinterpret_cast<const ::robosense::Point3*>(
      &::robosense::_Point3_default_instance_);
}
inline ::robosense::Point3* Perceptron::release_acceleration() {
  // @@protoc_insertion_point(field_release:robosense.Perceptron.acceleration)
  clear_has_acceleration();
  ::robosense::Point3* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline ::robosense::Point3* Perceptron::mutable_acceleration() {
  set_has_acceleration();
  if (acceleration_ == NULL) {
    auto* p = CreateMaybeMessage<::robosense::Point3>(GetArenaNoVirtual());
    acceleration_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robosense.Perceptron.acceleration)
  return acceleration_;
}
inline void Perceptron::set_allocated_acceleration(::robosense::Point3* acceleration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete acceleration_;
  }
  if (acceleration) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      acceleration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    set_has_acceleration();
  } else {
    clear_has_acceleration();
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:robosense.Perceptron.acceleration)
}

// optional float angular_velocity = 14;
inline bool Perceptron::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Perceptron::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Perceptron::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Perceptron::clear_angular_velocity() {
  angular_velocity_ = 0;
  clear_has_angular_velocity();
}
inline float Perceptron::angular_velocity() const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.angular_velocity)
  return angular_velocity_;
}
inline void Perceptron::set_angular_velocity(float value) {
  set_has_angular_velocity();
  angular_velocity_ = value;
  // @@protoc_insertion_point(field_set:robosense.Perceptron.angular_velocity)
}

// optional float association_score = 15;
inline bool Perceptron::has_association_score() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Perceptron::set_has_association_score() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Perceptron::clear_has_association_score() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Perceptron::clear_association_score() {
  association_score_ = 0;
  clear_has_association_score();
}
inline float Perceptron::association_score() const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.association_score)
  return association_score_;
}
inline void Perceptron::set_association_score(float value) {
  set_has_association_score();
  association_score_ = value;
  // @@protoc_insertion_point(field_set:robosense.Perceptron.association_score)
}

// optional float tracker_robustness = 16;
inline bool Perceptron::has_tracker_robustness() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Perceptron::set_has_tracker_robustness() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Perceptron::clear_has_tracker_robustness() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Perceptron::clear_tracker_robustness() {
  tracker_robustness_ = 0;
  clear_has_tracker_robustness();
}
inline float Perceptron::tracker_robustness() const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.tracker_robustness)
  return tracker_robustness_;
}
inline void Perceptron::set_tracker_robustness(float value) {
  set_has_tracker_robustness();
  tracker_robustness_ = value;
  // @@protoc_insertion_point(field_set:robosense.Perceptron.tracker_robustness)
}

// optional double tracking_time = 17;
inline bool Perceptron::has_tracking_time() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Perceptron::set_has_tracking_time() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Perceptron::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Perceptron::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
inline double Perceptron::tracking_time() const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.tracking_time)
  return tracking_time_;
}
inline void Perceptron::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:robosense.Perceptron.tracking_time)
}

// optional double visible_tracking_time = 18;
inline bool Perceptron::has_visible_tracking_time() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Perceptron::set_has_visible_tracking_time() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Perceptron::clear_has_visible_tracking_time() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Perceptron::clear_visible_tracking_time() {
  visible_tracking_time_ = 0;
  clear_has_visible_tracking_time();
}
inline double Perceptron::visible_tracking_time() const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.visible_tracking_time)
  return visible_tracking_time_;
}
inline void Perceptron::set_visible_tracking_time(double value) {
  set_has_visible_tracking_time();
  visible_tracking_time_ = value;
  // @@protoc_insertion_point(field_set:robosense.Perceptron.visible_tracking_time)
}

// repeated .robosense.Point3 history_velocity = 19;
inline int Perceptron::history_velocity_size() const {
  return history_velocity_.size();
}
inline void Perceptron::clear_history_velocity() {
  history_velocity_.Clear();
}
inline ::robosense::Point3* Perceptron::mutable_history_velocity(int index) {
  // @@protoc_insertion_point(field_mutable:robosense.Perceptron.history_velocity)
  return history_velocity_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::robosense::Point3 >*
Perceptron::mutable_history_velocity() {
  // @@protoc_insertion_point(field_mutable_list:robosense.Perceptron.history_velocity)
  return &history_velocity_;
}
inline const ::robosense::Point3& Perceptron::history_velocity(int index) const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.history_velocity)
  return history_velocity_.Get(index);
}
inline ::robosense::Point3* Perceptron::add_history_velocity() {
  // @@protoc_insertion_point(field_add:robosense.Perceptron.history_velocity)
  return history_velocity_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robosense::Point3 >&
Perceptron::history_velocity() const {
  // @@protoc_insertion_point(field_list:robosense.Perceptron.history_velocity)
  return history_velocity_;
}

// optional .robosense.Perceptron.Type track_type = 20;
inline bool Perceptron::has_track_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Perceptron::set_has_track_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Perceptron::clear_has_track_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Perceptron::clear_track_type() {
  track_type_ = 0;
  clear_has_track_type();
}
inline ::robosense::Perceptron_Type Perceptron::track_type() const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.track_type)
  return static_cast< ::robosense::Perceptron_Type >(track_type_);
}
inline void Perceptron::set_track_type(::robosense::Perceptron_Type value) {
  assert(::robosense::Perceptron_Type_IsValid(value));
  set_has_track_type();
  track_type_ = value;
  // @@protoc_insertion_point(field_set:robosense.Perceptron.track_type)
}

// optional .robosense.Perceptron.Type type = 21;
inline bool Perceptron::has_type() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Perceptron::set_has_type() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Perceptron::clear_has_type() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Perceptron::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::robosense::Perceptron_Type Perceptron::type() const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.type)
  return static_cast< ::robosense::Perceptron_Type >(type_);
}
inline void Perceptron::set_type(::robosense::Perceptron_Type value) {
  assert(::robosense::Perceptron_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:robosense.Perceptron.type)
}

// optional float type_confidence = 22;
inline bool Perceptron::has_type_confidence() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Perceptron::set_has_type_confidence() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Perceptron::clear_has_type_confidence() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Perceptron::clear_type_confidence() {
  type_confidence_ = 0;
  clear_has_type_confidence();
}
inline float Perceptron::type_confidence() const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.type_confidence)
  return type_confidence_;
}
inline void Perceptron::set_type_confidence(float value) {
  set_has_type_confidence();
  type_confidence_ = value;
  // @@protoc_insertion_point(field_set:robosense.Perceptron.type_confidence)
}

// optional bool is_background = 23;
inline bool Perceptron::has_is_background() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Perceptron::set_has_is_background() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Perceptron::clear_has_is_background() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Perceptron::clear_is_background() {
  is_background_ = false;
  clear_has_is_background();
}
inline bool Perceptron::is_background() const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.is_background)
  return is_background_;
}
inline void Perceptron::set_is_background(bool value) {
  set_has_is_background();
  is_background_ = value;
  // @@protoc_insertion_point(field_set:robosense.Perceptron.is_background)
}

// repeated .robosense.Point3 polygon_point = 24;
inline int Perceptron::polygon_point_size() const {
  return polygon_point_.size();
}
inline void Perceptron::clear_polygon_point() {
  polygon_point_.Clear();
}
inline ::robosense::Point3* Perceptron::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:robosense.Perceptron.polygon_point)
  return polygon_point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::robosense::Point3 >*
Perceptron::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:robosense.Perceptron.polygon_point)
  return &polygon_point_;
}
inline const ::robosense::Point3& Perceptron::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.polygon_point)
  return polygon_point_.Get(index);
}
inline ::robosense::Point3* Perceptron::add_polygon_point() {
  // @@protoc_insertion_point(field_add:robosense.Perceptron.polygon_point)
  return polygon_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robosense::Point3 >&
Perceptron::polygon_point() const {
  // @@protoc_insertion_point(field_list:robosense.Perceptron.polygon_point)
  return polygon_point_;
}

// repeated .robosense.Point3 trajectory = 25;
inline int Perceptron::trajectory_size() const {
  return trajectory_.size();
}
inline void Perceptron::clear_trajectory() {
  trajectory_.Clear();
}
inline ::robosense::Point3* Perceptron::mutable_trajectory(int index) {
  // @@protoc_insertion_point(field_mutable:robosense.Perceptron.trajectory)
  return trajectory_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::robosense::Point3 >*
Perceptron::mutable_trajectory() {
  // @@protoc_insertion_point(field_mutable_list:robosense.Perceptron.trajectory)
  return &trajectory_;
}
inline const ::robosense::Point3& Perceptron::trajectory(int index) const {
  // @@protoc_insertion_point(field_get:robosense.Perceptron.trajectory)
  return trajectory_.Get(index);
}
inline ::robosense::Point3* Perceptron::add_trajectory() {
  // @@protoc_insertion_point(field_add:robosense.Perceptron.trajectory)
  return trajectory_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robosense::Point3 >&
Perceptron::trajectory() const {
  // @@protoc_insertion_point(field_list:robosense.Perceptron.trajectory)
  return trajectory_;
}

// -------------------------------------------------------------------

// PerceptronSet

// repeated .robosense.Perceptron perceptron = 1;
inline int PerceptronSet::perceptron_size() const {
  return perceptron_.size();
}
inline void PerceptronSet::clear_perceptron() {
  perceptron_.Clear();
}
inline ::robosense::Perceptron* PerceptronSet::mutable_perceptron(int index) {
  // @@protoc_insertion_point(field_mutable:robosense.PerceptronSet.perceptron)
  return perceptron_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::robosense::Perceptron >*
PerceptronSet::mutable_perceptron() {
  // @@protoc_insertion_point(field_mutable_list:robosense.PerceptronSet.perceptron)
  return &perceptron_;
}
inline const ::robosense::Perceptron& PerceptronSet::perceptron(int index) const {
  // @@protoc_insertion_point(field_get:robosense.PerceptronSet.perceptron)
  return perceptron_.Get(index);
}
inline ::robosense::Perceptron* PerceptronSet::add_perceptron() {
  // @@protoc_insertion_point(field_add:robosense.PerceptronSet.perceptron)
  return perceptron_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::robosense::Perceptron >&
PerceptronSet::perceptron() const {
  // @@protoc_insertion_point(field_list:robosense.PerceptronSet.perceptron)
  return perceptron_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace robosense

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::robosense::Perceptron_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::robosense::Perceptron_Type>() {
  return ::robosense::Perceptron_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_perceptron_2eproto
